// SPDX-FileCopyrightText: 2025 Milon
// SPDX-FileCopyrightText: 2025 Whatstone
// SPDX-FileCopyrightText: 2025 bitcrushing
//
// SPDX-License-Identifier: AGPL-3.0-or-later

using Content.Client.UserInterface.Controls;
using Content.Shared._NF.Bank;
using Content.Shared.Atmos;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client._NF.Atmos.UI;

[GenerateTypedNameReferences]
public sealed partial class GasSaleMenu : FancyWindow
{
    public Action? RefreshRequested;
    public Action? SellRequested;
    public string FallbackGasString = "gas-fallback";

    public GasSaleMenu()
    {
        RobustXamlLoader.Load(this);
        RefreshButton.OnPressed += OnRefreshPressed;
        SellButton.OnPressed += OnSellPressed;
    }

    public void SetMixture(GasMixture mixture, int appraisal)
    {
        Gases.Children.Clear();
        GasAmounts.Children.Clear();
        var hasGas = false;
        for (var i = 0; i < Atmospherics.TotalNumberOfGases; i++)
        {
            var gasAmount = mixture.GetMoles(i);
            if (gasAmount <= 0)
                continue;

            // Mono - Removed hardcoded array of strings, uses gas enum IDs to look up GasNames
            var gas = (Gas)i;
            Label gasLabel = new();
            if (Atmospherics.GasNames.TryGetValue(gas, out var gasName))
                gasLabel.Text = gasName;
            else
                gasLabel.Text = Loc.GetString(FallbackGasString, ("number", i));

            Gases.Children.Add(gasLabel);

            Label amountLabel = new();
            amountLabel.Text = Loc.GetString("gas-sale-menu-quantity", ("value", gasAmount));
            amountLabel.HorizontalAlignment = HAlignment.Right;
            GasAmounts.Children.Add(amountLabel);
            hasGas = true;
        }

        if (!hasGas)
        {
            Label noGasLabel = new();
            noGasLabel.Text = Loc.GetString("gas-sale-menu-no-gases");
            Gases.Children.Add(noGasLabel);
        }

        AppraisalLabel.Text = BankSystemExtensions.ToSpesoString(appraisal);
    }

    public void SetEnabled(bool enabled)
    {
        SellButton.Disabled = !enabled;
    }

    private void OnSellPressed(BaseButton.ButtonEventArgs obj)
    {
        SellRequested?.Invoke();
    }

    private void OnRefreshPressed(BaseButton.ButtonEventArgs obj)
    {
        RefreshRequested?.Invoke();
    }
}
