// SPDX-FileCopyrightText: 2021 ike709
// SPDX-FileCopyrightText: 2022 Paul Ritter
// SPDX-FileCopyrightText: 2022 Pieter-Jan Briers
// SPDX-FileCopyrightText: 2022 Vordenburg
// SPDX-FileCopyrightText: 2022 mirrorcult
// SPDX-FileCopyrightText: 2022 wrexbe
// SPDX-FileCopyrightText: 2023 Visne
// SPDX-FileCopyrightText: 2024 Kot
// SPDX-FileCopyrightText: 2024 Nemanja
// SPDX-FileCopyrightText: 2024 metalgearsloth
// SPDX-FileCopyrightText: 2025 Steve
// SPDX-FileCopyrightText: 2025 bitcrushing
//
// SPDX-License-Identifier: AGPL-3.0-or-later

using System;
using System.Collections.Generic;
using System.Globalization;
using Content.Client.Atmos.EntitySystems;
using Content.Shared.Atmos;
using Content.Shared.Atmos.Prototypes;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Localization;

namespace Content.Client.Atmos.UI
{
    /// <summary>
    /// Client-side UI used to control a gas filter.
    /// Funkystation - adapted for filtering multiple gases at once.
    /// </summary>
    [GenerateTypedNameReferences]
    public sealed partial class GasFilterWindow : DefaultWindow
    {
        private readonly Dictionary<Gas, Button> _gasControls = new();
        private readonly HashSet<Gas> _selectedGases = new();

        public event Action? ToggleStatusButtonPressed;
        public event Action<string>? FilterTransferRateChanged;
        public event Action<HashSet<Gas>>? FilterGasesChanged;

        public GasFilterWindow()
        {
            RobustXamlLoader.Load(this);

            ToggleStatusButton.OnPressed += _ => SetFilterStatus(!FilterStatus);
            ToggleStatusButton.OnPressed += _ => ToggleStatusButtonPressed?.Invoke();

            FilterTransferRateInput.OnTextChanged += _ => SetFilterRate.Disabled = false;
            SetFilterRate.OnPressed += _ =>
            {
                FilterTransferRateChanged?.Invoke(FilterTransferRateInput.Text);
                SetFilterRate.Disabled = true;
            };

            SelectAllButton.OnPressed += args => SelectAllGases(args);
            DeselectAllButton.OnPressed += args => DeselectAllGases(args);
        }

        public void SetTransferRate(float rate)
        {
            FilterTransferRateInput.Text = rate.ToString(CultureInfo.CurrentCulture);
        }

        public bool FilterStatus { get; private set; } = true;

        public void SetFilterStatus(bool enabled)
        {
            FilterStatus = enabled;
            if (enabled)
            {
                ToggleStatusButton.Text = Loc.GetString("comp-gas-filter-ui-status-enabled");
            }
            else
            {
                ToggleStatusButton.Text = Loc.GetString("comp-gas-filter-ui-status-disabled");
            }
        }

        public void SetFilteredGases(HashSet<Gas> gases)
        {
            _selectedGases.Clear();
            _selectedGases.UnionWith(gases);
            foreach (var (gas, button) in _gasControls)
            {
                button.Pressed = gases.Contains(gas);
            }
        }

        public void PopulateGasList(IEnumerable<GasPrototype> gases)
        {
            foreach (var gas in gases)
            {
                var gasButton = new Button
                {
                    Name = gas.ID.ToString(),
                    Text = Loc.GetString(gas.Name),
                    ToggleMode = true,
                    HorizontalExpand = true,
                    Pressed = _selectedGases.Contains((Gas)int.Parse(gas.ID))
                };
                gasButton.OnToggled += args =>
                {
                    var gasId = (Gas)int.Parse(gasButton.Name);
                    if (args.Pressed)
                        _selectedGases.Add(gasId);
                    else
                        _selectedGases.Remove(gasId);
                    FilterGasesChanged?.Invoke(new HashSet<Gas>(_selectedGases));
                };
                _gasControls.Add((Gas)int.Parse(gas.ID), gasButton);
                GasContainer.AddChild(gasButton);
            }
        }

        private void SelectAllGases(BaseButton.ButtonEventArgs args)
        {
            foreach (var (gas, button) in _gasControls)
            {
                button.Pressed = true;
                _selectedGases.Add(gas);
            }
            FilterGasesChanged?.Invoke(new HashSet<Gas>(_selectedGases));
        }

        private void DeselectAllGases(BaseButton.ButtonEventArgs args)
        {
            foreach (var (_, button) in _gasControls)
            {
                button.Pressed = false;
            }
            _selectedGases.Clear();
            FilterGasesChanged?.Invoke(new HashSet<Gas>(_selectedGases));
        }
    }
}